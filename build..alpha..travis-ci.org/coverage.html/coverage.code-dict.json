{"/home/travis/build/npmtest/node-npmtest-graphviz/test.js":"/* istanbul instrument in package npmtest_graphviz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graphviz/lib.npmtest_graphviz.js":"/* istanbul instrument in package npmtest_graphviz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_graphviz = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_graphviz = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-graphviz/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-graphviz && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_graphviz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_graphviz\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_graphviz.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_graphviz.rollup.js'] =\n            local.assetsDict['/assets.npmtest_graphviz.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_graphviz.__dirname + '/lib.npmtest_graphviz.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/graphviz.js":"/**\n * Module dependencies.\n */\nvar path = require('path'),\n  spawn  = require('child_process').spawn,\n  temp = require('temp'),\n  fs = require('fs'),\n  fsExt = require('./deps/core_ext/fs-ext'),\n  Graph = require('./deps/graph').Graph;\n\n/**\n * Create a new undirected graph\n * @constructor\n * @param {String} id The graphID\n * @return {Graph}\n * @api public\n */\nexports.graph = function(id) {\n  var graph = new Graph(null, id);\n  graph.type = 'graph';\n  return graph;\n};\n\n/**\n * Create a new directed graph\n * @constructor\n * @param {String} id The graphID\n * @return {Graph}\n * @api public \n */\nexports.digraph = function(id) {\n  var graph = new Graph(null, id);\n  graph.type = 'digraph';\n  return graph;  \n};\n\nfunction _parse(file, callback, errback) {\n  var gvprScript = path.join(__dirname, \"ext\", \"gvpr\", \"dot2js.g\"),\n    parameters = [\"-f\" + gvprScript, file],\n    cmd = \"gvpr\",\n    __graph_eval,\n    err = '',\n    out = '',\n    graphviz = spawn(cmd, parameters);\n\n  graphviz.stdout.on('data', function(data) {\n    out += data;\n    eval(data.toString());\n  });\n  graphviz.stderr.on('data', function(data) {\n    err += data;\n  });\n  graphviz.stdin.end();\n  graphviz.on('exit', function(code) {\n    if(code !== 0 || __graph_eval === undefined) {\n      if(errback) { \n        errback(code, out, err); \n      }\n    } else {\n      callback(__graph_eval);\n    }\n  });\n}\n/**\n * Create a new graph from a dot script\n * @constructor\n * @param {String} file_or_script The DOT script or file\n * @param {Function} callback\n * @param {Function} errback\n * @api public \n */\nexports.parse = function(file_or_script, callback, errback) {\n  if(fsExt.exist(file_or_script)) {\n    _parse(file_or_script, callback, errback);\n  } else {\n    temp.open('node-graphviz', function(err, info) {\n      fs.write(info.fd, file_or_script);\n      fs.close(info.fd, function(err) {\n        _parse(info.path, callback, errback);\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/core_ext/fs-ext.js":"var fs = require('fs');\n\nexports.exist = function(path) {\n  try {\n    fs.statSync( path );\n  }\n  catch(e) {\n    return( false );\n  }\n  return( true );\n}\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/graph.js":"/**\n * Module dependencies\n */\nvar Hash = require( './core_ext/hash' ).Hash,\n  Node = require( './node' ).Node,\n  Edge = require( './edge' ).Edge,\n  gvattrs = require( './attributs' ),\n  Attributs = gvattrs.Attributs,\n  util = require('util'),\n  path = require('path'),\n  spawn  = require('child_process').spawn;\n\n/**\n * Create a new graph\n * @constructor\n * @param {Graph} graph Parent Graph\n * @param {String} id The graphID\n * @return {Graph}\n * @api public\n */\nvar Graph = exports.Graph = function(graph, id) {\n  this.relativeGraph = graph;\n  this.id = id;\n  this.type = 'graph';\n  this.gvPath = '';\n  this.nodes = new Hash();\n  this.edges = new Array();\n  this.clusters = new Hash();\n  if( this.relativeGraph == null ) {\n    this.graphAttributs = new Attributs(\"G\");\n  } else {\n    this.graphAttributs = new Attributs(\"C\");\n  }\n  this.nodesAttributs = new Attributs(\"N\");\n  this.edgesAttributs = new Attributs(\"E\");\n  this.use = 'dot';\n};\n\n/**\n * Create a new node\n *\n * @param {String} id The node ID\n * @param {Object} attrs Node attributs\n * @return {Node}\n * @api public\n */\nGraph.prototype.addNode = function(id, attrs) {\n  this.nodes.setItem(id, new Node(this, id));\n  if( attrs ) {\n    for( k in attrs ) {\n      this.nodes.items[id].set( k, attrs[k] );\n    }\n  }\n\n  return this.nodes.items[id];\n}\n\n/**\n * Return a node for a given ID\n *\n * @param {String} id The node ID\n * @return {Node}\n * @api public\n */\nGraph.prototype.getNode = function(id) {\n  return this.nodes.items[id];\n}\n\nGraph.prototype.from = function(id) {\n\tif( this.nodes.items[id] == undefined ) {\n\t\tthis.addNode(id);\n\t}\n\treturn this.nodes.items[id];\n}\n\n/**\n * Return the number of nodes in the current graph\n *\n * @return {Integer}\n * @api public\n */\nGraph.prototype.nodeCount = function() {\n  return this.nodes.length;\n}\n\n/**\n * Create a new edge\n *\n * @param {String|Node} nodeOne\n * @param {String|Node} nodeTwo\n * @param {Object} attrs Node attributs\n * @return {Edge}\n * @api public\n */\nGraph.prototype.addEdge = function(nodeOne, nodeTwo, attrs) {\n  var _nodeOne = nodeOne;\n  var _nodeTwo = nodeTwo;\n  if( typeof(nodeOne) == 'string' ) {\n    _nodeOne = this.nodes.items[nodeOne];\n    if( _nodeOne == null ) {\n      _nodeOne = this.addNode( nodeOne );\n    }\n  }\n  if( typeof(nodeTwo) == 'string' ) {\n    _nodeTwo = this.nodes.items[nodeTwo];\n    if( _nodeTwo == null ) {\n      _nodeTwo = this.addNode( nodeTwo );\n    }\n  }\n  \n  var edge = new Edge(this, _nodeOne, _nodeTwo);\n  if( attrs ) {\n    for( k in attrs ) {\n      edge.set( k, attrs[k] );\n    }\n  }\n  this.edges.push( edge );\n  \n  return edge;\n}\n\n/**\n * Return the number of edges in the current graph\n *\n * @return {Integer}\n * @api public\n */\nGraph.prototype.edgeCount = function() {\n  return this.edges.length;\n};\n\n/**\n * Create a new subgraph\n *\n * @param {String} id The subgraph ID\n * @return {Graph}\n * @api public\n */\nGraph.prototype.addCluster = function(id) {\n  var cluster = new Graph(this, id);\n  cluster.type = this.type;\n  this.clusters.setItem(id, cluster);\n  return cluster;\n}\n\n/**\n * Return a subgraph for a given ID\n *\n * @param {String} id The subgraph ID\n * @return {Graph}\n * @api public\n */\nGraph.prototype.getCluster = function(id) {\n  return this.clusters.items[id];\n}\n\n/**\n * Return the number of subgraphs in the current graph\n *\n * @return {Integer}\n * @api public\n */\nGraph.prototype.clusterCount = function() {\n  return this.clusters.length;\n}\n\n/**\n * Set a graph attribut\n *\n * @param {String} name The attribut name\n * @param {Void} value The attribut value\n * @api public\n */\nGraph.prototype.set = function(name, value) {\n  this.graphAttributs.set(name, value);\n}\n\n/**\n * Get a graph attribut\n *\n * @param {String} name The attribut name\n * @return {Void}\n * @api public\n */\nGraph.prototype.get = function(name) {\n  return this.graphAttributs.get(name);\n}\n\n/**\n * Set a global node attribut\n *\n * @param {String} name The attribut name\n * @param {Void} value The attribut value\n * @api public\n */\nGraph.prototype.setNodeAttribut = function(name, value) {\n  this.nodesAttributs.set(name, value);\n}\n\n/**\n * Get a global node attribut\n *\n * @param {String} name The attribut name\n * @return {Void}\n * @api public\n */\nGraph.prototype.getNodeAttribut = function(name) {\n  return this.nodesAttributs.get(name);\n}\n\n/**\n * Set a global edge attribut\n *\n * @param {String} name The attribut name\n * @param {Void} value The attribut value\n * @api public\n */\nGraph.prototype.setEdgeAttribut = function(name, value) {\n  this.edgesAttributs.set(name, value);\n}\n\n/**\n * Get a global edge attribut\n *\n * @param {String} name The attribut name\n * @return {Void}\n * @api public\n */\nGraph.prototype.getEdgeAttribut = function(name) {\n  return this.edgesAttributs.get(name);\n}\n\n/**\n * Generate the GraphViz script\n *\n * @return {String}\n * @api public\n */\nGraph.prototype.to_dot = function() {\n  var dotScript = '';\n  if( this.relativeGraph == null ) {\n    dotScript = this.type + ' ' + this.id + ' {\\n'\n  } else {\n    dotScript = 'subgraph ' + this.id + ' {\\n'\n  }\n  \n  // Graph attributs\n  if( this.graphAttributs.length() > 0 ) {\n    dotScript = dotScript + \"  graph\" + this.graphAttributs.to_dot() + \";\\n\";\n  }\n  \n  // Nodes attributs\n  if( this.nodesAttributs.length() > 0 ) {\n    dotScript = dotScript + \"  node\" + this.nodesAttributs.to_dot() + \";\\n\";\n  }\n  \n  // Edges attributs\n  if( this.edgesAttributs.length() > 0 ) {\n    dotScript = dotScript + \"  edge\" + this.edgesAttributs.to_dot() + \";\\n\";\n  }\n  \n  // Each clusters\n  for( var id in this.clusters.items ) {\n    dotScript = dotScript + this.clusters.items[id].to_dot() + '\\n'\n  }\n  \n  // Each nodes\n  for( var id in this.nodes.items ) {\n    dotScript = dotScript + '  ' + this.nodes.items[id].to_dot() + ';\\n'\n  }\n  \n  // Each edges\n  for( var i in this.edges ) {\n    dotScript = dotScript + '  ' + this.edges[i].to_dot() + ';\\n'\n  }\n  \n  dotScript = dotScript + '}\\n'\n  \n  return dotScript;\n}\n\n/**\n * Generate an output in file or memory\n *\n * @param {String|Object} type The output file type (png, jpeg, ps, ...) or options\n * @param {String|Function} name_or_callback The output file name or callback\n * @param {Function} errback Error callback\n * @api public\n *\n * Options :\n *   - type : output file type (png, jpeg, ps, ...)\n *   - use : Graphviz command to use (dot, neato, ...)\n *   - path : GraphViz path\n *   - G : \n *   - N :\n *   - E :\n */\nGraph.prototype.render = function(type_or_options, name_or_callback, errback) {\n\tvar parameters = [];\n\t\n\t// Get output type\n\tvar type = type_or_options;\n\tif( typeof(type_or_options) == 'object' ) {\n\t\ttype = type_or_options.type;\n\n\t\t// Get use\n\t\tif( type_or_options.use != undefined ) { this.use = type_or_options.use; }\n\t\t\n\t\t// Get path\n\t\tif( type_or_options.path != undefined ) { this.gvPath = type_or_options.path; }\n\t\t\n\t\t// Get extra Graph Options\n\t\tif( type_or_options.G != undefined ) {\n\t\t\tfor( attr in type_or_options.G ) {\n\t\t\t\tif( gvattrs.isValid( attr, \"G\" ) == false ) {\n\t\t\t\t\tutil.debug( \"Warning : Invalid attribut `\"+attr+\"' for a graph\" );\n\t\t\t\t}\n\t      parameters.push( \"-G\"+attr+\"=\"+type_or_options.G[attr] )\n\t    }\n\t\t}\n\t\t// Get extra Node Options\n\t\tif( type_or_options.N != undefined ) {\n\t\t\tfor( attr in type_or_options.N ) {\n\t\t\t\tif( gvattrs.isValid( attr, \"N\" ) == false ) {\n\t\t\t\t\tutil.debug( \"Warning : Invalid attribut `\"+attr+\"' for a node\" );\n\t\t\t\t}\n\t      parameters.push( \"-N\"+attr+\"=\"+type_or_options.N[attr] )\n\t    }\t\t\t\n\t\t}\n\t\t// Get extra Edge Options\n\t\tif( type_or_options.E != undefined ) {\n\t\t\tfor( attr in type_or_options.E ) {\n\t\t\t\tif( gvattrs.isValid( attr, \"E\" ) == false ) {\n\t\t\t\t\tutil.debug( \"Warning : Invalid attribut `\"+attr+\"' for an edge\" );\n\t\t\t\t}\n\t      parameters.push( \"-E\"+attr+\"=\"+type_or_options.E[attr] )\n\t    }\t\t\t\n\t\t}\n\t}\n\tparameters.push( '-T' + type );\n\t\n  var dotScript = this.to_dot();\n  \n  var cmd = this.use;\n  if( this.gvPath != '' ) {\n    cmd = path.join( this.gvPath, this.use )\n  }\n  \n  var rendered = null;\n  var out = ''\n  var err = ''\n  var outcallback = function(data) { \n    if( rendered == null ) {\n      rendered = data; \n    } else {\n      __b = new Buffer( rendered.length + data.length )\n      rendered.copy(__b, 0, 0)\n      data.copy(__b, rendered.length, 0)\n      rendered = __b\n    }\n  };\n  \n  if( typeof(name_or_callback) == 'string' ) {\n    parameters.push( '-o' + name_or_callback )\n    outcallback = function(data) { out += data; }\n  }\n  \n  graphviz = spawn(cmd, parameters);\n  graphviz.stdout.on('data', outcallback);\n  graphviz.stderr.on('data', function(data) {\n    err += data;\n  });\n  graphviz.on('exit', function(code) {\n    if(code !== 0) {\n      if(errback) { errback(code, out, err) }\n    } else {\n      if( typeof(name_or_callback) == 'function' ) name_or_callback(rendered);\n    }\n  });\n  graphviz.stdin.write(this.to_dot());\n  graphviz.stdin.end();\n}\n// Compatibility\nGraph.prototype.output = function(type, name_or_callback, errback) {\n  this.render(type, name_or_callback, errback);\n}\n\n/**\n * Set the GraphViz path\n *\n * @param {String} path The GraphViz path\n * @api public\n */\nGraph.prototype.setGraphVizPath = function(path) {\n  this.gvPath = path;\n}\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/core_ext/hash.js":"var Hash = exports.Hash = function() {\n  this.length = 0;\n  this.items = new Array();\n  for (var i = 0; i < arguments.length; i += 2) {\n    if (typeof(arguments[i + 1]) != 'undefined') {\n      this.items[arguments[i]] = arguments[i + 1];\n      this.length++;\n    }\n  }\n}\n\nHash.prototype.removeItem = function(in_key) {\n  var tmp_previous;\n  if (typeof(this.items[in_key]) != 'undefined') {\n    this.length--;\n    var tmp_previous = this.items[in_key];\n    delete this.items[in_key];\n  }\n   \n  return tmp_previous;\n}\n\nHash.prototype.getItem = function(in_key) {\n  return this.items[in_key];\n}\n\nHash.prototype.setItem = function(in_key, in_value) {\n  var tmp_previous;\n  if (typeof(in_value) != 'undefined') {\n    if (typeof(this.items[in_key]) == 'undefined') {\n      this.length++;\n    }\n    else {\n      tmp_previous = this.items[in_key];\n    }\n\n    this.items[in_key] = in_value;\n  }\n   \n  return tmp_previous;\n}\n\nHash.prototype.hasItem = function(in_key) {\n  return typeof(this.items[in_key]) != 'undefined';\n}\n\nHash.prototype.clear = function() {\n  for (var i in this.items) {\n    delete this.items[i];\n  }\n\n  this.length = 0;\n}\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/node.js":"/**\n * Module dependencies\n */\nvar Hash = require('./core_ext/hash').Hash,\n  Attributs = require('./attributs').Attributs;\n\n/**\n * Create a new node\n * @constructor\n * @param {Graph} graph Parent Graph\n * @param {String} id The node ID\n * @return {Node}\n * @api public\n */\nvar Node = exports.Node = function(graph, id) {\n  this.relativeGraph = graph;\n  this.id = id;\n  this.attributs = new Attributs(\"N\");\n};\n\n/**\n *\n */\nNode.prototype.to = function(id, attrs) {\n\tthis.relativeGraph.addEdge(this, id, attrs);\n\treturn this.relativeGraph.from(id);\n};\n\n/**\n * Set a node attribut\n *\n * @param {String} name The attribut name\n * @param {Void} value The attribut value\n * @api public\n */\nNode.prototype.set = function(name, value) {\n  this.attributs.set(name, value);\n};\n\n/**\n * Get a node attribut\n *\n * @param {String} name The attribut name\n * @return {Void}\n * @api public\n */\nNode.prototype.get = function(name) {\n  return this.attributs.get(name);\n};\n\n/**\n * @api private\n */\nNode.prototype.to_dot = function() {\n  var nodeOutput = '\"' + this.id + '\"' + this.attributs.to_dot();\n  return nodeOutput;\n};\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/attributs.js":"var Hash = require('./core_ext/hash').Hash,\n    util = require('util');\n\nvar attrs = {\n  \"Damping\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"K\" :                  { \"usage\" : \"GC\",   \"type\" : \"double\" },\n  \"URL\" :                { \"usage\" : \"ENGC\", \"type\" : \"escString\" },\n  \"area\" :               { \"usage\" : \"NC\",   \"type\" : \"double\" },\n  \"arrowhead\" :          { \"usage\" : \"E\",    \"type\" : \"arrowType\" },\n  \"arrowsize\" :          { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"arrowtail\" :          { \"usage\" : \"E\",    \"type\" : \"arrowType\" },\n  \"aspect\" :             { \"usage\" : \"G\",    \"type\" : \"aspectType\" },\n  \"bb\" :                 { \"usage\" : \"G\",    \"type\" : \"rect\" },\n  \"bgcolor\" :            { \"usage\" : \"GC\",   \"type\" : \"color\" },\n  \"center\" :             { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"charset\" :            { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"clusterrank\" :        { \"usage\" : \"G\",    \"type\" : \"clusterMode\" },\n  \"color\" :              { \"usage\" : \"ENC\",  \"type\" : \"color\" },\n  \"colorscheme\" :        { \"usage\" : \"ENCG\", \"type\" : \"string\" },\n  \"comment\" :            { \"usage\" : \"ENG\",  \"type\" : \"string\" },\n  \"compound\" :           { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"concentrate\" :        { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"constraint\" :         { \"usage\" : \"E\",    \"type\" : \"bool\" },\n  \"decorate\" :           { \"usage\" : \"E\",    \"type\" : \"bool\" },\n  \"defaultdist\" :        { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"dim\" :                { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"dimen\" :              { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"dir\" :                { \"usage\" : \"E\",    \"type\" : \"dirType\" },\n  \"diredgeconstraints\" : { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"distortion\" :         { \"usage\" : \"N\",    \"type\" : \"double\" },\n  \"dpi\" :                { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"edgeURL\" :            { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"edgehref\" :           { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"edgetarget\" :         { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"edgetooltip\" :        { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"epsilon\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"esep\" :               { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"fillcolor\" :          { \"usage\" : \"NEC\",  \"type\" : \"color\" },\n  \"fixedsize\" :          { \"usage\" : \"N\",    \"type\" : \"bool\" },\n  \"fontcolor\" :          { \"usage\" : \"ENGC\", \"type\" : \"color\" },\n  \"fontname\" :           { \"usage\" : \"ENGC\", \"type\" : \"string\" },\n  \"fontnames\" :          { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"fontpath\" :           { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"fontsize\" :           { \"usage\" : \"ENGC\", \"type\" : \"double\" },\n  \"group\" :              { \"usage\" : \"N\",    \"type\" : \"string\" },\n  \"headURL\" :            { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"headclip\" :           { \"usage\" : \"E\",    \"type\" : \"bool\" },\n  \"headhref\" :           { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"headlabel\" :          { \"usage\" : \"E\",    \"type\" : \"lblString\" },\n  \"headport\" :           { \"usage\" : \"E\",    \"type\" : \"portPos\" },\n  \"headtarget\" :         { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"headtooltip\" :        { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"height\" :             { \"usage\" : \"N\",    \"type\" : \"double\" },\n  \"href\" :               { \"usage\" : \"ENGC\", \"type\" : \"escString\" },\n  \"id\" :                 { \"usage\" : \"GNE\",  \"type\" : \"lblString\" },\n  \"image\" :              { \"usage\" : \"N\",    \"type\" : \"string\" },\n  \"imagepath\" :          { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"imagescale\" :         { \"usage\" : \"N\",    \"type\" : \"string\" },\n  \"label\" :              { \"usage\" : \"ENGC\", \"type\" : \"lblString\" },\n  \"labelURL\" :           { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"labelangle\" :         { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"labeldistance\" :      { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"labelfloat\" :         { \"usage\" : \"E\",    \"type\" : \"bool\" },\n  \"labelfontcolor\" :     { \"usage\" : \"E\",    \"type\" : \"color\" },\n  \"labelfontname\" :      { \"usage\" : \"E\",    \"type\" : \"string\" },\n  \"labelfontsize\" :      { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"labelhref\" :          { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"labeljust\" :          { \"usage\" : \"GC\",   \"type\" : \"string\" },\n  \"labelloc\" :           { \"usage\" : \"NGC\",  \"type\" : \"string\" },\n  \"labeltarget\" :        { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"labeltooltip\" :       { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"landscape\" :          { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"layer\" :              { \"usage\" : \"ENC\",  \"type\" : \"layerRange\" },\n  \"layerlistsep\" :       { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"layers\" :             { \"usage\" : \"G\",    \"type\" : \"layerList\" },\n  \"layerselect\" :        { \"usage\" : \"G\",    \"type\" : \"layerRange\" },\n  \"layersep\" :           { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"layout\" :             { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"len\" :                { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"levels\" :             { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"levelsgap\" :          { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"lhead\" :              { \"usage\" : \"E\",    \"type\" : \"string\" },\n  \"lheight\" :            { \"usage\" : \"GC\",   \"type\" : \"double\" },\n  \"lp\" :                 { \"usage\" : \"EGC\",  \"type\" : \"point\" },\n  \"ltail\" :              { \"usage\" : \"E\",    \"type\" : \"string\" },\n  \"lwidth\" :             { \"usage\" : \"GC\",   \"type\" : \"double\" },\n  \"margin\" :             { \"usage\" : \"NGC\",  \"type\" : \"pointf\" },\n  \"maxiter\" :            { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"mclimit\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"mindist\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"minlen\" :             { \"usage\" : \"E\",    \"type\" : \"int\" },\n  \"mode\" :               { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"model\" :              { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"mosek\" :              { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"nodesep\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"nojustify\" :          { \"usage\" : \"GCNE\", \"type\" : \"bool\" },\n  \"normalize\" :          { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"nslimit\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"nslimit1\" :           { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"ordering\" :           { \"usage\" : \"GN\",   \"type\" : \"string\" },\n  \"orientation\" :        { \"usage\" : \"GN\",   \"type\" : \"string\" },\n  \"outputorder\" :        { \"usage\" : \"G\",    \"type\" : \"outputMode\" },\n  \"overlap\" :            { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"overlap_scaling\" :    { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"pack\" :               { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"packmode\" :           { \"usage\" : \"G\",    \"type\" : \"packMode\" },\n  \"pad\" :                { \"usage\" : \"G\",    \"type\" : \"pointf\" },\n  \"page\" :               { \"usage\" : \"G\",    \"type\" : \"pointf\" },\n  \"pagedir\" :            { \"usage\" : \"G\",    \"type\" : \"pagedir\" },\n  \"pencolor\" :           { \"usage\" : \"C\",    \"type\" : \"color\" },\n  \"penwidth\" :           { \"usage\" : \"CNE\",  \"type\" : \"double\" },\n  \"peripheries\" :        { \"usage\" : \"NC\",   \"type\" : \"int\" },\n  \"pin\" :                { \"usage\" : \"N\",    \"type\" : \"bool\" },\n  \"pos\" :                { \"usage\" : \"EN\",   \"type\" : \"point\" },\n  \"quadtree\" :           { \"usage\" : \"G\",    \"type\" : \"quadType\" },\n  \"quantum\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"rank\" :               { \"usage\" : \"S\",    \"type\" : \"rankType\" },\n  \"rankdir\" :            { \"usage\" : \"G\",    \"type\" : \"rankdir\" },\n  \"ranksep\" :            { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"ratio\" :              { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"rects\" :              { \"usage\" : \"N\",    \"type\" : \"rect\" },\n  \"regular\" :            { \"usage\" : \"N\",    \"type\" : \"bool\" },\n  \"remincross\" :         { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"repulsiveforce\" :     { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"resolution\" :         { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"root\" :               { \"usage\" : \"GN\",   \"type\" : \"string\" },\n  \"rotate\" :             { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"rotation\" :           { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"samehead\" :           { \"usage\" : \"E\",    \"type\" : \"string\" },\n  \"sametail\" :           { \"usage\" : \"E\",    \"type\" : \"string\" },\n  \"samplepoints\" :       { \"usage\" : \"N\",    \"type\" : \"int\" },\n  \"scale\" :              { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"searchsize\" :         { \"usage\" : \"G\",    \"type\" : \"int\" },\n  \"sep\" :                { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"shape\" :              { \"usage\" : \"N\",    \"type\" : \"shape\" },\n  \"shapefile\" :          { \"usage\" : \"N\",    \"type\" : \"string\" },\n  \"showboxes\" :          { \"usage\" : \"ENG\",  \"type\" : \"int\" },\n  \"sides\" :              { \"usage\" : \"N\",    \"type\" : \"int\" },\n  \"size\" :               { \"usage\" : \"G\",    \"type\" : \"pointf\" },\n  \"skew\" :               { \"usage\" : \"N\",    \"type\" : \"double\" },\n  \"smoothing\" :          { \"usage\" : \"G\",    \"type\" : \"smoothType\" },\n  \"sortv\" :              { \"usage\" : \"GCN\",  \"type\" : \"int\" },\n  \"splines\" :            { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"start\" :              { \"usage\" : \"G\",    \"type\" : \"startType\" },\n  \"style\" :              { \"usage\" : \"ENCG\", \"type\" : \"style\" },\n  \"stylesheet\" :         { \"usage\" : \"G\",    \"type\" : \"string\" },\n  \"tailURL\" :            { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"tailclip\" :           { \"usage\" : \"E\",    \"type\" : \"bool\" },\n  \"tailhref\" :           { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"taillabel\" :          { \"usage\" : \"E\",    \"type\" : \"lblString\" },\n  \"tailport\" :           { \"usage\" : \"E\",    \"type\" : \"portPos\" },\n  \"tailtarget\" :         { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"tailtooltip\" :        { \"usage\" : \"E\",    \"type\" : \"escString\" },\n  \"target\" :             { \"usage\" : \"ENGC\", \"type\" : \"escString\" },\n  \"tooltip\" :            { \"usage\" : \"NEC\",  \"type\" : \"escString\" },\n  \"truecolor\" :          { \"usage\" : \"G\",    \"type\" : \"bool\" },\n  \"vertices\" :           { \"usage\" : \"N\",    \"type\" : \"pointfList\" },\n  \"viewport\" :           { \"usage\" : \"G\",    \"type\" : \"viewPort\" },\n  \"voro_margin\" :        { \"usage\" : \"G\",    \"type\" : \"double\" },\n  \"weight\" :             { \"usage\" : \"E\",    \"type\" : \"double\" },\n  \"width\" :              { \"usage\" : \"N\",    \"type\" : \"double\" },\n  \"xlabel\" :             { \"usage\" : \"EN\",   \"type\" : \"lblString\" },\n  \"z\" :                  { \"usage\" : \"N\",    \"type\" : \"double\" }\n};\n\nvar gType = {\n  \"E\" : \"edge\",\n  \"N\" : \"node\",\n  \"G\" : \"graph\",\n  \"C\" : \"cluster\"\n};\n\nvar quotedTypes = [\n  \"escString\",\n  \"rect\",\n  \"color\",\n  \"colorList\",\n  \"string\",\n  \"lblString\",\n  \"portPos\",\n  \"point\",\n  \"pointf\",\n  \"pointfList\",\n  \"splineType\",\n  \"style\",\n  \"viewPort\"\n];\n\nfunction mustBeQuoted(data) {\n  return(quotedTypes.indexOf(attrs[data].type) !== -1);\n}\n\nfunction quoteMe(attr, value) {\n  if(mustBeQuoted(attr)) {\n    return('\"' + value + '\"');\n  } else {\n    return(value);\n  }\n}\n\nfunction validateAttribut(name, type) {\n  if(attrs[name]) {\n    return(attrs[name].usage.indexOf(type) > -1);\n  } else {\n    return(false);\n  }\n}\n\nexports.isValid = function(name, type) {\n\treturn validateAttribut(name, type);\n};\n\nvar Attributs = exports.Attributs = function(t) {\n  this._type = t;\n  this.attributs = new Hash();\n};\n\nAttributs.prototype.length = function() {\n  return(this.attributs.length);\n};\n\nAttributs.prototype.set = function(name, value) {\n  if(validateAttribut(name, this._type) === false) {\n    util.debug(\"Warning : Invalid attribut `\" + name + \"' for a \" + gType[this._type]);\n    // throw \"Invalid attribut `\"+name+\"' for a \"+gType[this._type]\n  }\n  this.attributs.setItem(name, value);\n};\n\nAttributs.prototype.get = function(name) {\n  return this.attributs.items[name];\n};\n\nAttributs.prototype.to_dot = function(link) {\n  var attrsOutput = \"\",\n\t\tsep = \"\";\n  \n  if(this.attributs.length > 0) {\n    attrsOutput = attrsOutput + \" [ \";\n    for(var name in this.attributs.items) {\n      attrsOutput = attrsOutput + sep + name + \" = \" + quoteMe(name, this.attributs.items[name]);\n      sep = \", \";\n    }\n    attrsOutput = attrsOutput + \" ]\";\n  }\n  \n  return attrsOutput;\n};\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/lib/deps/edge.js":"/**\n * Module dependencies\n */\nvar Hash = require('./core_ext/hash').Hash,\n  Attributs = require('./attributs').Attributs;\n\n/**\n * Create a new edge\n * @constructor\n * @param {Graph} graph Parent Graph\n * @param {String|Node} nodeOne The first node\n * @param {String|Node} nodeTwo The second node\n * @return {Edge}\n * @api public\n */\nvar Edge = exports.Edge = function(graph, nodeOne, nodeTwo) {\n  this.relativeGraph = graph;\n  this.nodeOne = nodeOne;\n  this.nodeTwo = nodeTwo;\n  this.attributs = new Attributs(\"E\");\n};\n\n/**\n * Set an edge attribut\n *\n * @param {String} name The attribut name\n * @param {Void} value The attribut value\n * @api public\n */\nEdge.prototype.set = function(name, value) {\n  this.attributs.set(name, value);\n};\n\n/**\n * Get an edge attribut\n *\n * @param {String} name The attribut name\n * @return {Void}\n * @api public\n */\nEdge.prototype.get = function(name) {\n  return this.attributs.get(name);\n};\n\n/**\n * @api private\n */\nEdge.prototype.to_dot = function() {\n  var edgeLink = \"->\";\n  if(this.relativeGraph.type === \"graph\") {\n    edgeLink = \"--\";\n  }\n  \n  var edgeOutput = '\"' + this.nodeOne.id + '\"' + \" \" + edgeLink + \" \" + '\"' + this.nodeTwo.id + '\"';\n  edgeOutput = edgeOutput + this.attributs.to_dot();\n  return edgeOutput;\n};\n","/home/travis/build/npmtest/node-npmtest-graphviz/node_modules/graphviz/Jakefile.js":"// This file is a node-jake file -- http://github.com/mde/node-jake\n\nvar util = require('util'),\n\texec  = require('child_process').exec,\n\tchild;\n\nvar docTitle = 'node-graphviz'\nvar docFiles = 'lib/graphviz.js lib/deps/graph.js lib/deps/node.js lib/deps/edge.js'\nvar outputDocFile = 'documentation.json'\nvar docRibbon = 'http://github.com/glejeune/node-graphviz'\nvar docDesc = '[Node.js](http://nodejs.org) interface to the [GraphViz](http://graphviz.org) graphing tool'\n\ndesc('Generate node-graphviz documentation.');\ntask('doc', [], function () {\n  child = exec('dox -r ' + docRibbon + ' -d \"' + docDesc + '\" -t \"' + docTitle + '\" < ' + docFiles + ' > ' + outputDocFile, \n    function (error, stdout, stderr) {\n      if (error !== null) {\n        console.log('exec error: ' + error);\n      }\n  });\n});\n\ndesc('Install');\ntask('install', [], function() {\n\tchild = exec('npm install .',\n\t\tfunction(error, stdout, stderr) {\n\t\t\tif (error !== null) {\n\t\t\t\tconsole.log('exec error: ' + error);\n\t\t\t}\n\t\t}\n\t);\n});\n\ndesc('Publish');\ntask('publish', [], function() {\n\tchild = exec('npm publish .',\n\t\tfunction(error, stdout, stderr) {\n\t\t\tif (error !== null) {\n\t\t\t\tconsole.log('exec error: ' + error);\n\t\t\t}\n\t\t}\n\t);\n});\n"}